{"version":3,"file":"bundle.cjs","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/row.ts","../src/formatters/CheckboxFormatter.tsx","../src/hooks/useLayoutEffect.ts","../src/hooks/useFocusRef.ts","../src/DataGridDefaultComponentsProvider.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/hooks/useRowSelection.ts","../src/Columns.tsx","../src/utils/colSpanUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/styleUtils.ts","../src/utils/index.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingCellRef.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/HeaderRenderer.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/SortIcon.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding-block: 0;\n  padding-inline: 8px;\n  border-inline-end: 1px solid var(--rdg-border-color);\n  border-block-end: 1px solid var(--rdg-border-color);\n  grid-row-start: var(--rdg-grid-row-start);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    outline: 2px solid var(--rdg-selection-color);\n    outline-offset: -2px;\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\n// max-content does not calculate width when contain is set to style or size\nexport const cellAutoResizeClassname = css`\n  .${cell} {\n    contain: content;\n  }\n`;\n\nexport const cellFrozen = css`\n  position: sticky;\n  /* Should have a higher value than 0 to show up above unfrozen cells */\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: calc(2px * var(--rdg-sign)) 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --rdg-color: #000;\n  --rdg-border-color: #ddd;\n  --rdg-summary-border-color: #aaa;\n  --rdg-background-color: hsl(0deg 0% 100%);\n  --rdg-header-background-color: hsl(0deg 0% 97.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 96%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 29%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 69%);\n  --rdg-checkbox-disabled-border-color: #ccc;\n  --rdg-checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --rdg-color: #ddd;\n  --rdg-border-color: #444;\n  --rdg-summary-border-color: #555;\n  --rdg-background-color: hsl(0deg 0% 13%);\n  --rdg-header-background-color: hsl(0deg 0% 10.5%);\n  --rdg-row-hover-background-color: hsl(0deg 0% 9%);\n  --rdg-row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --rdg-checkbox-color: hsl(207deg 100% 79%);\n  --rdg-checkbox-focus-color: hsl(207deg 100% 89%);\n  --rdg-checkbox-disabled-border-color: #000;\n  --rdg-checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --rdg-selection-color: #66afe9;\n  --rdg-font-size: 14px;\n\n  display: grid;\n\n  color-scheme: var(--rdg-color-scheme, light dark);\n\n  /* https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context */\n  /* We set a stacking context so internal elements don't render on top of external components. */\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  block-size: 350px;\n  border: 1px solid var(--rdg-border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--rdg-background-color);\n  color: var(--rdg-color);\n  font-size: var(--rdg-font-size);\n\n  /* set stacking context in safari */\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  /* needed on Firefox */\n  &::before {\n    content: '';\n    grid-column: 1/-1;\n    grid-row: 1/-1;\n  }\n\n  &.rdg-dark {\n    --rdg-color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --rdg-color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n\nexport const focusSinkClassname = css`\n  grid-column: 1/-1;\n  pointer-events: none;\n  /* Should have a higher value than 3 to show up above header row */\n  z-index: 4;\n`;\n","import { css } from '@linaria/core';\n\nexport const row = css`\n  display: contents;\n  line-height: var(--rdg-row-height);\n  background-color: var(--rdg-background-color);\n\n  &:hover {\n    background-color: var(--rdg-row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--rdg-row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  outline: 2px solid var(--rdg-selection-color);\n  outline-offset: -2px;\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected`;\n\nexport const rowSelectedWithFrozenCell = css`\n  &::before {\n    content: '';\n    display: inline-block;\n    height: 100%;\n    position: sticky;\n    inset-inline-start: 0;\n    border-inline-start: 2px solid var(--rdg-selection-color);\n  }\n`;\n","import { forwardRef } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport type { CheckboxFormatterProps } from '../types';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  inset: 0;\n  margin-inline-end: 1px; /* align checkbox in row group cell */\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  inline-size: 20px;\n  block-size: 20px;\n  border: 2px solid var(--rdg-border-color);\n  background-color: var(--rdg-background-color);\n  .${checkboxInput}:checked + & {\n    background-color: var(--rdg-checkbox-color);\n    outline: 4px solid var(--rdg-background-color);\n    outline-offset: -6px;\n  }\n  .${checkboxInput}:focus + & {\n    border-color: var(--rdg-checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n  .${checkbox} {\n    border-color: var(--rdg-checkbox-disabled-border-color);\n    background-color: var(--rdg-checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\nexport const CheckboxFormatter = forwardRef<HTMLInputElement, CheckboxFormatterProps>(\n  function CheckboxFormatter({ onChange, ...props }: CheckboxFormatterProps, ref) {\n    function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n      onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n    }\n\n    return (\n      <label\n        className={clsx(checkboxLabelClassname, {\n          [checkboxLabelDisabledClassname]: props.disabled\n        })}\n      >\n        <input\n          type=\"checkbox\"\n          ref={ref}\n          {...props}\n          className={checkboxInputClassname}\n          onChange={handleChange}\n        />\n        <div className={checkboxClassname} />\n      </label>\n    );\n  }\n);\n","// eslint-disable-next-line @typescript-eslint/no-restricted-imports\nimport { useEffect, useLayoutEffect as useOriginalLayoutEffect } from 'react';\n\n// Silence silly warning\n// https://reactjs.org/link/uselayouteffect-ssr\nexport const useLayoutEffect = typeof window === 'undefined' ? useEffect : useOriginalLayoutEffect;\n","import { useRef } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import { createContext, useContext } from 'react';\n\nimport type { Components, Maybe } from './types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst DataGridDefaultComponentsContext = createContext<Maybe<Components<any, any>>>(undefined);\n\nexport const DataGridDefaultComponentsProvider = DataGridDefaultComponentsContext.Provider;\n\nexport function useDefaultComponents<R, SR>(): Maybe<Components<R, SR>> {\n  return useContext(DataGridDefaultComponentsContext);\n}\n","import { useFocusRef } from '../hooks/useFocusRef';\nimport { useDefaultComponents } from '../DataGridDefaultComponentsProvider';\nimport type { CheckboxFormatterProps } from '../types';\n\ntype SharedInputProps = Pick<CheckboxFormatterProps, 'disabled' | 'aria-label' | 'aria-labelledby'>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n  const Formatter = useDefaultComponents()!.checkboxFormatter!;\n\n  return (\n    <Formatter\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      ref={ref}\n      tabIndex={tabIndex}\n      disabled={disabled}\n      checked={value}\n      onChange={onChange}\n    />\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-inline-start: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks/useRowSelection';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  minWidth: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={props.isCellSelected}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode, Maybe } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  minRowIdx: number;\n  maxRowIdx: number;\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getSelectedCellColSpan<R, SR>({\n  rows,\n  summaryRows,\n  rowIdx,\n  lastFrozenColumnIndex,\n  column,\n  isGroupRow\n}: Pick<\n  GetNextSelectedCellPositionOpts<R, SR>,\n  'rows' | 'summaryRows' | 'isGroupRow' | 'lastFrozenColumnIndex'\n> & {\n  rowIdx: number;\n  column: CalculatedColumn<R, SR>;\n}) {\n  if (rowIdx === -1) {\n    return getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n  }\n\n  if (rowIdx >= 0 && rowIdx < rows.length) {\n    const row = rows[rowIdx];\n    if (!isGroupRow(row)) {\n      return getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    }\n    return undefined;\n  }\n\n  if (summaryRows) {\n    return getColSpan(column, lastFrozenColumnIndex, {\n      type: 'SUMMARY',\n      row: summaryRows[rowIdx - rows.length]\n    });\n  }\n\n  return undefined;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  minRowIdx,\n  maxRowIdx,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    if (nextRowIdx >= 0 && nextRowIdx < rows.length) {\n      const row = rows[nextRowIdx];\n      if (isGroupRow(row)) return;\n    }\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx: nextRowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === maxRowIdx;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === minRowIdx;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts {\n  cellNavigationMode: CellNavigationMode;\n  maxColIdx: number;\n  minRowIdx: number;\n  maxRowIdx: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid({\n  cellNavigationMode,\n  maxColIdx,\n  minRowIdx,\n  maxRowIdx,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import type { CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport function getRowStyle(rowIdx: number, height?: number): CSSProperties {\n  if (height !== undefined) {\n    return {\n      '--rdg-grid-row-start': rowIdx,\n      '--rdg-row-height': `${height}px`\n    } as unknown as CSSProperties;\n  }\n  return { '--rdg-grid-row-start': rowIdx } as unknown as CSSProperties;\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import type { CalculatedColumn } from '../types';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\nexport * from './styleUtils';\n\nexport const { min, max, round, floor, sign, abs, ceil } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: CalculatedColumn<R, SR>\n): number {\n  width = max(width, minWidth);\n\n  // ignore maxWidth if it less than minWidth\n  if (typeof maxWidth === 'number' && maxWidth > minWidth) {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, Maybe } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { clampColumnWidth, floor, max, min, round } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: Maybe<readonly string[]>;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const defaultWidth = defaultColumnOptions?.width;\n  const defaultMinWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultMaxWidth = defaultColumnOptions?.maxWidth;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        width: rawColumn.width ?? defaultWidth,\n        minWidth: rawColumn.minWidth ?? defaultMinWidth,\n        maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [\n    rawColumns,\n    defaultWidth,\n    defaultMinWidth,\n    defaultMaxWidth,\n    defaultFormatter,\n    defaultResizable,\n    defaultSortable,\n    rawGroupBy\n  ]);\n\n  const { layoutCssVars, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        // avoid decimals as subpixel positioning can lead to cell borders not being displayed\n        const unallocatedWidth = viewportWidth - allocatedWidth;\n        const unallocatedColumnWidth = round(unallocatedWidth / unassignedColumnsCount);\n        width = clampColumnWidth(unallocatedColumnWidth, column);\n        allocatedWidth += width;\n        unassignedColumnsCount--;\n        columnMetrics.set(column, { width, left });\n      }\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      gridTemplateColumns: templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n","import { useRef, useState } from 'react';\nimport { useLayoutEffect } from './useLayoutEffect';\n\nimport { ceil } from '../utils';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [inlineSize, setInlineSize] = useState(1);\n  const [blockSize, setBlockSize] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current!;\n    const { width, height } = gridRef.current!.getBoundingClientRect();\n    const initialWidth = width - offsetWidth + clientWidth;\n    const initialHeight = height - offsetHeight + clientHeight;\n\n    setInlineSize(handleDevicePixelRatio(initialWidth));\n    setBlockSize(initialHeight);\n\n    const resizeObserver = new ResizeObserver((entries) => {\n      const size = entries[0].contentBoxSize[0];\n      setInlineSize(handleDevicePixelRatio(size.inlineSize));\n      setBlockSize(size.blockSize);\n    });\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, inlineSize, blockSize];\n}\n\n// TODO: remove once fixed upstream\n// we reduce width by 1px here to avoid layout issues in Chrome\n// https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\nfunction handleDevicePixelRatio(size: number) {\n  return size - (devicePixelRatio === 1 ? 0 : ceil(devicePixelRatio));\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useCallback, useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingCellRef(isSelected: boolean) {\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const [isChildFocused, setIsChildFocused] = useState(false);\n\n  if (isChildFocused && !isSelected) {\n    setIsChildFocused(false);\n  }\n\n  const ref = useCallback((cell: HTMLDivElement | null) => {\n    if (cell === null || cell.contains(document.activeElement)) return;\n\n    cell.focus({ preventScroll: true });\n  }, []);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== event.currentTarget) {\n      setIsChildFocused(true);\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused;\n\n  return {\n    ref: isSelected ? ref : undefined,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus: isSelected ? onFocus : undefined\n  };\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow, Maybe } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: Maybe<readonly SR[]>;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, Maybe, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds: Maybe<ReadonlySet<unknown>>;\n  enableVirtualization: boolean;\n}\n\n// TODO: https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    let gridTemplateRows = ' ';\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/b0a470cc264e9100afcaa1b78ed59d88f7914ad4/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      gridTemplateRows += `${currentRowHeight}px `;\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      gridTemplateRows,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  let rowOverscanStartIdx = 0;\n  let rowOverscanEndIdx = rows.length - 1;\n\n  if (enableVirtualization) {\n    const overscanThreshold = 4;\n    const rowVisibleStartIdx = findRowIdx(scrollTop);\n    const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n    rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n    rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n  }\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\n\nimport { useFocusRef } from './hooks';\nimport type { HeaderRendererProps } from './types';\nimport { useDefaultComponents } from './DataGridDefaultComponentsProvider';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nexport default function HeaderRenderer<R, SR>({\n  column,\n  sortDirection,\n  priority,\n  onSort,\n  isCellSelected\n}: HeaderRendererProps<R, SR>) {\n  if (!column.sortable) return <>{column.name}</>;\n\n  return (\n    <SortableHeaderCell\n      onSort={onSort}\n      sortDirection={sortDirection}\n      priority={priority}\n      isCellSelected={isCellSelected}\n    >\n      {column.name}\n    </SortableHeaderCell>\n  );\n}\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority' | 'isCellSelected'\n>;\n\ninterface SortableHeaderCellProps<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nfunction SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children,\n  isCellSelected\n}: SortableHeaderCellProps<R, SR>) {\n  const SortIcon = useDefaultComponents<R, SR>()!.sortIcon!;\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLSpanElement>) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      // stop propagation to prevent scrolling\n      event.preventDefault();\n      onSort(event.ctrlKey || event.metaKey);\n    }\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLSpanElement>) {\n    onSort(event.ctrlKey || event.metaKey);\n  }\n\n  return (\n    <span\n      ref={ref}\n      tabIndex={tabIndex}\n      className={headerSortCellClassname}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n    >\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        <SortIcon sortDirection={sortDirection} />\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport DefaultHeaderRenderer from './HeaderRenderer';\nimport { getCellStyle, getCellClassname, clampColumnWidth } from './utils';\nimport { useRovingCellRef } from './hooks';\n\nconst cellResizable = css`\n  touch-action: none;\n\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    inset-block-start: 0;\n    inset-inline-end: 0;\n    inset-block-end: 0;\n    inline-size: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  | 'sortColumns'\n  | 'onSortColumnsChange'\n  | 'allRowsSelected'\n  | 'onAllRowsSelectionChange'\n  | 'selectCell'\n  | 'onColumnResize'\n  | 'shouldFocusGrid'\n  | 'direction'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  isCellSelected: boolean;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  onColumnResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderCellProps<R, SR>) {\n  const isRtl = direction === 'rtl';\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  const HeaderRenderer = column.headerRenderer ?? DefaultHeaderRenderer;\n\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right, left } = currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      const { right, left } = currentTarget.getBoundingClientRect();\n      const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n      if (width > 0) {\n        onColumnResize(column, clampColumnWidth(width, column));\n      }\n    }\n\n    function onLostPointerCapture() {\n      currentTarget.removeEventListener('pointermove', onPointerMove);\n      currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n    }\n\n    currentTarget.setPointerCapture(pointerId);\n    currentTarget.addEventListener('pointermove', onPointerMove);\n    currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n  }\n\n  function onSort(ctrlClick: boolean) {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  }\n\n  function onClick() {\n    selectCell(column.idx);\n  }\n\n  function onDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    const { right, left } = event.currentTarget.getBoundingClientRect();\n    const offset = isRtl ? event.clientX - left : right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    onColumnResize(column, 'auto');\n  }\n\n  function handleFocus(event: React.FocusEvent<HTMLDivElement>) {\n    onFocus?.(event);\n    if (shouldFocusGrid) {\n      // Select the first header cell if there is no selected cell\n      selectCell(0);\n    }\n  }\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      ref={ref}\n      // set the tabIndex to 0 when there is no selected cell so grid can receive focus\n      tabIndex={shouldFocusGrid ? 0 : tabIndex}\n      className={className}\n      style={{\n        ...getCellStyle(column, colSpan),\n        minWidth: column.minWidth,\n        maxWidth: column.maxWidth ?? undefined\n      }}\n      onFocus={handleFocus}\n      onClick={onClick}\n      onDoubleClick={column.resizable ? onDoubleClick : undefined}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      <HeaderRenderer\n        column={column}\n        sortDirection={sortDirection}\n        priority={priority}\n        onSort={onSort}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        isCellSelected={isCellSelected}\n      />\n    </div>\n  );\n}\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn, Direction } from './types';\nimport { getColSpan, getRowStyle } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { cell, cellFrozen, rowSelectedClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number | 'auto') => void;\n  selectCell: (columnIdx: number) => void;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  shouldFocusGrid: boolean;\n  direction: Direction;\n}\n\nconst headerRow = css`\n  display: contents;\n  line-height: var(--rdg-header-row-height);\n  background-color: var(--rdg-header-background-color);\n  font-weight: bold;\n\n  > .${cell} {\n    /* Should have a higher value than 1 to show up above frozen cells */\n    z-index: 2;\n    position: sticky;\n    inset-block-start: 0;\n  }\n\n  > .${cellFrozen} {\n    z-index: 3;\n  }\n`;\n\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  shouldFocusGrid,\n  direction\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        isCellSelected={selectedCellIdx === column.idx}\n        onColumnResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n        selectCell={selectCell}\n        shouldFocusGrid={shouldFocusGrid && index === 0}\n        direction={direction}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(headerRowClassname, {\n        [rowSelectedClassname]: selectedCellIdx === -1\n      })}\n      style={getRowStyle(1)}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(props: CellRendererProps<R, SR>) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc } from './hooks';\nimport { getColSpan, getRowStyle } from './utils';\nimport { rowClassname, rowSelectedClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    gridRowStart,\n    height,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [rowSelectedClassname]: selectedCellIdx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={ref}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingCellRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, cellFrozenLast, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider } from './hooks';\nimport { getRowStyle } from './utils';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  gridRowStart: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--rdg-header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-inline-end: none;\n  }\n`;\n\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  gridRowStart,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [rowSelectedClassname]: selectedCellIdx === -1\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={getRowStyle(gridRowStart, height)}\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, CellRendererProps } from './types';\nimport { useRovingCellRef } from './hooks';\n\nexport const summaryCellClassname = css`\n  inset-block-start: var(--rdg-summary-row-top);\n  inset-block-end: var(--rdg-summary-row-bottom);\n`;\n\ninterface SharedCellRendererProps<R, SR>\n  extends Pick<CellRendererProps<R, SR>, 'column' | 'colSpan' | 'isCellSelected'> {\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  isCellSelected,\n  selectCell\n}: SummaryCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingCellRef(isCellSelected);\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    summaryCellClassname,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  function onClick() {\n    selectCell(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={onClick}\n      onFocus={onFocus}\n    >\n      {SummaryFormatter && (\n        <SummaryFormatter column={column} row={row} isCellSelected={isCellSelected} />\n      )}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\nimport { css } from '@linaria/core';\n\nimport { cell, row, rowClassname, rowSelectedClassname } from './style';\nimport { getColSpan, getRowStyle } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { CalculatedColumn, RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<\n  RowRendererProps<R, SR>,\n  'viewportColumns' | 'rowIdx' | 'gridRowStart'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  top: number | undefined;\n  bottom: number | undefined;\n  lastFrozenColumnIndex: number;\n  selectedCellIdx: number | undefined;\n  selectCell: (row: SR, column: CalculatedColumn<R, SR>) => void;\n}\n\nconst summaryRow = css`\n  &.${row} {\n    line-height: var(--rdg-summary-row-height);\n    > .${cell} {\n      position: sticky;\n    }\n  }\n`;\n\nconst summaryRowBorderClassname = css`\n  & > .${cell} {\n    border-block-start: 2px solid var(--rdg-summary-border-color);\n  }\n`;\n\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  gridRowStart,\n  row,\n  viewportColumns,\n  top,\n  bottom,\n  lastFrozenColumnIndex,\n  selectedCellIdx,\n  selectCell,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === column.idx;\n\n    cells.push(\n      <SummaryCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        isCellSelected={isCellSelected}\n        selectCell={selectCell}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={clsx(\n        rowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n        summaryRowClassname,\n        {\n          [summaryRowBorderClassname]: rowIdx === 0,\n          [rowSelectedClassname]: selectedCellIdx === -1\n        }\n      )}\n      style={\n        {\n          ...getRowStyle(gridRowStart),\n          '--rdg-summary-row-top': top !== undefined ? `${top}px` : undefined,\n          '--rdg-summary-row-bottom': bottom !== undefined ? `${bottom}px` : undefined\n        } as unknown as React.CSSProperties\n      }\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname, onEditorNavigation } from './utils';\nimport type { CellRendererProps, EditorProps, Omit } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR>\n  extends Omit<EditorProps<R, SR>, 'onClose'>,\n    SharedCellRendererProps<R, SR> {\n  closeEditor: () => void;\n  scrollToCell: () => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  closeEditor,\n  scrollToCell\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n  const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onClose(true);\n  });\n\n  useEffect(() => {\n    if (!commitOnOutsideClick) return;\n\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideClick, commitOnOutsideMouseDown]);\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (event.key === 'Escape') {\n      event.stopPropagation();\n      // Discard changes\n      onClose();\n    } else if (event.key === 'Enter') {\n      event.stopPropagation();\n      onClose(true);\n      scrollToCell();\n    } else {\n      const onNavigation = column.editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) {\n        event.stopPropagation();\n      }\n    }\n  }\n\n  function onClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      onRowChange(row, true);\n    } else {\n      closeEditor();\n    }\n  }\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.renderFormatter && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={onKeyDown}\n      onMouseDownCapture={commitOnOutsideClick ? cancelFrameRequest : undefined}\n    >\n      {column.editor != null && (\n        <>\n          <column.editor column={column} row={row} onRowChange={onRowChange} onClose={onClose} />\n          {column.editorOptions?.renderFormatter && (\n            <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  inset-inline-end: 0;\n  inset-block-end: 0;\n  inline-size: 8px;\n  block-size: 8px;\n  background-color: var(--rdg-selection-color);\n\n  &:hover {\n    inline-size: 16px;\n    block-size: 16px;\n    border: 2px solid var(--rdg-selection-color);\n    background-color: var(--rdg-background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import { css } from '@linaria/core';\nimport type { SortIconProps } from './types';\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\nexport default function SortIcon({ sortDirection }: SortIconProps) {\n  return sortDirection !== undefined ? (\n    <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n      <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n    </svg>\n  ) : null;\n}\n","import { forwardRef, useState, useRef, useImperativeHandle, useCallback, useMemo } from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  focusSinkClassname,\n  cellAutoResizeClassname,\n  rowSelected,\n  rowSelectedWithFrozenCell\n} from './style';\nimport {\n  useLayoutEffect,\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport SortIcon from './SortIcon';\nimport { CheckboxFormatter } from './formatters';\nimport {\n  DataGridDefaultComponentsProvider,\n  useDefaultComponents\n} from './DataGridDefaultComponentsProvider';\nimport {\n  assertIsValidKeyGetter,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  sign,\n  abs,\n  getSelectedCellColSpan\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  CopyEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs,\n  Maybe,\n  Components,\n  Direction\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'width' | 'minWidth' | 'maxWidth' | 'resizable' | 'sortable'\n>;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -2,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: Maybe<boolean>) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: Maybe<readonly SR[]>;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: Maybe<(row: R) => K>;\n  onRowsChange?: Maybe<(rows: R[], data: RowsChangeData<R, SR>) => void>;\n\n  /**\n   * Dimensions props\n   */\n  /**\n   * The height of each row in pixels\n   * @default 35\n   */\n  rowHeight?: Maybe<number | ((args: RowHeightArgs<R>) => number)>;\n  /**\n   * The height of the header row in pixels\n   * @default 35\n   */\n  headerRowHeight?: Maybe<number>;\n  /**\n   * The height of each summary row in pixels\n   * @default 35\n   */\n  summaryRowHeight?: Maybe<number>;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: Maybe<ReadonlySet<K>>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: Maybe<(selectedRows: Set<K>) => void>;\n  /** Used for multi column sorting */\n  sortColumns?: Maybe<readonly SortColumn[]>;\n  onSortColumnsChange?: Maybe<(sortColumns: SortColumn[]) => void>;\n  defaultColumnOptions?: Maybe<DefaultColumnOptions<R, SR>>;\n  groupBy?: Maybe<readonly string[]>;\n  rowGrouper?: Maybe<(rows: readonly R[], columnKey: string) => Record<string, readonly R[]>>;\n  expandedGroupIds?: Maybe<ReadonlySet<unknown>>;\n  onExpandedGroupIdsChange?: Maybe<(expandedGroupIds: Set<unknown>) => void>;\n  onFill?: Maybe<(event: FillEvent<R>) => R>;\n  onCopy?: Maybe<(event: CopyEvent<R>) => void>;\n  onPaste?: Maybe<(event: PasteEvent<R>) => R>;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: Maybe<(row: R, column: CalculatedColumn<R, SR>) => void>;\n  /** Called when the grid is scrolled */\n  onScroll?: Maybe<(event: React.UIEvent<HTMLDivElement>) => void>;\n  /** Called when a column is resized */\n  onColumnResize?: Maybe<(idx: number, width: number) => void>;\n\n  /**\n   * Toggles and modes\n   */\n  /** @default 'NONE' */\n  cellNavigationMode?: Maybe<CellNavigationMode>;\n  /** @default true */\n  enableVirtualization?: Maybe<boolean>;\n\n  /**\n   * Miscellaneous\n   */\n  components?: Maybe<Components<R, SR>>;\n  rowClass?: Maybe<(row: R) => Maybe<string>>;\n  direction?: Maybe<Direction>;\n  'data-testid'?: Maybe<string>;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onFill,\n    onCopy,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    components,\n    className,\n    style,\n    rowClass,\n    direction,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  const defaultComponents = useDefaultComponents<R, SR>();\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = components?.rowRenderer ?? defaultComponents?.rowRenderer ?? Row;\n  const sortIcon = components?.sortIcon ?? defaultComponents?.sortIcon ?? SortIcon;\n  const checkboxFormatter =\n    components?.checkboxFormatter ?? defaultComponents?.checkboxFormatter ?? CheckboxFormatter;\n  const noRowsFallback = components?.noRowsFallback ?? defaultComponents?.noRowsFallback;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  direction ??= 'ltr';\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n  const [autoResizeColumn, setAutoResizeColumn] = useState<CalculatedColumn<R, SR> | null>(null);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const rowRef = useRef<HTMLDivElement>(null);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n  const isHeaderRowSelected = selectedPosition.rowIdx === -1;\n  const isRtl = direction === 'rtl';\n  const leftKey = isRtl ? 'ArrowRight' : 'ArrowLeft';\n  const rightKey = isRtl ? 'ArrowLeft' : 'ArrowRight';\n\n  const defaultGridComponents = useMemo(\n    () => ({\n      sortIcon,\n      checkboxFormatter\n    }),\n    [sortIcon, checkboxFormatter]\n  );\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    gridTemplateRows,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n  const maxColIdx = columns.length - 1;\n  const minRowIdx = -1; // change it to 0?\n  const maxRowIdx = headerRowsCount + rows.length + summaryRowsCount - 2;\n  const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n  const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectViewportCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: Maybe<boolean>) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const selectHeaderCellLatest = useLatestFunc((idx: number) => {\n    selectCell({ rowIdx: -1, idx });\n  });\n  const selectSummaryCellLatest = useLatestFunc(\n    (summaryRow: SR, column: CalculatedColumn<R, SR>) => {\n      const rowIdx = summaryRows!.indexOf(summaryRow) + headerRowsCount + rows.length - 1;\n      selectCell({ rowIdx, idx: column.idx });\n    }\n  );\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      !selectedCellIsWithinSelectionBounds ||\n      isSamePosition(selectedPosition, prevSelectedPosition.current)\n    ) {\n      prevSelectedPosition.current = selectedPosition;\n      return;\n    }\n\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (selectedPosition.idx === -1) {\n      rowRef.current!.focus({ preventScroll: true });\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (autoResizeColumn === null) return;\n    const columnElement = gridRef.current!.querySelector(\n      `[aria-colindex=\"${autoResizeColumn.idx + 1}\"]`\n    )!;\n    const { width } = columnElement.getBoundingClientRect();\n    setColumnWidths((columnWidths) => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(autoResizeColumn.key, width);\n      return newColumnWidths;\n    });\n    setAutoResizeColumn(null);\n    onColumnResize?.(autoResizeColumn.idx, width);\n  }, [autoResizeColumn, gridRef, onColumnResize]);\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number | 'auto') => {\n      if (width === 'auto') {\n        setAutoResizeColumn(column);\n        return;\n      }\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest('.rdg-cell') !== null;\n    const isRowEvent = hasGroups && event.target === rowRef.current;\n    if (!isCellEvent && !isRowEvent) return;\n\n    const { key, keyCode } = event;\n    const { rowIdx } = selectedPosition;\n\n    if (\n      selectedCellIsWithinViewportBounds &&\n      (onPaste != null || onCopy != null) &&\n      isCtrlKeyHeldDown(event) &&\n      !isGroupRow(rows[rowIdx]) &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (isRowIdxWithinViewportBounds(rowIdx)) {\n      const row = rows[rowIdx];\n\n      if (\n        isGroupRow(row) &&\n        selectedPosition.idx === -1 &&\n        // Collapse the current group row if it is focused and is in expanded state\n        ((key === leftKey && row.isExpanded) ||\n          // Expand the current group row if it is focused and is in collapsed state\n          (key === rightKey && !row.isExpanded))\n      ) {\n        event.preventDefault(); // Prevents scrolling\n        toggleGroup(row.id);\n        return;\n      }\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    // scrollLeft is nagative when direction is rtl\n    setScrollLeft(abs(scrollLeft));\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (selectedPosition.mode !== 'EDIT') return;\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[getRawRowIdx(rowIdx)];\n    const sourceColumnKey = columns[idx].key;\n    setCopiedCell({ row: sourceRow, columnKey: sourceColumnKey });\n    onCopy?.({ sourceRow, sourceColumnKey });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!selectedCellIsWithinViewportBounds) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  /**\n   * utils\n   */\n  function isColIdxWithinSelectionBounds(idx: number) {\n    return idx >= minColIdx && idx <= maxColIdx;\n  }\n\n  function isRowIdxWithinViewportBounds(rowIdx: number) {\n    return rowIdx >= 0 && rowIdx < rows.length;\n  }\n\n  function isCellWithinSelectionBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellWithinViewportBounds({ idx, rowIdx }: Position): boolean {\n    return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinViewportBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: Maybe<boolean>): void {\n    if (!isCellWithinSelectionBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', row, originalRow: row });\n    } else if (isSamePosition(selectedPosition, position)) {\n      // Avoid re-renders if the selected cell state is the same\n      // TODO: replace with a #record? https://github.com/microsoft/TypeScript/issues/39831\n      scrollToCell(position);\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinSelectionBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n\n      const colSpan = getSelectedCellColSpan({\n        rows,\n        summaryRows,\n        rowIdx,\n        lastFrozenColumnIndex,\n        column,\n        isGroupRow\n      });\n\n      if (colSpan !== undefined) {\n        const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n        right = left + width;\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      const sign = isRtl ? -1 : 1;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = (left - totalFrozenColumnWidth) * sign;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = (right - clientWidth) * sign;\n      }\n    }\n\n    if (typeof rowIdx === 'number' && isRowIdxWithinViewportBounds(rowIdx)) {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (key === leftKey && isRowSelected && isGroupRow(row) && !row.isExpanded && row.level !== 0) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case leftKey:\n        return { idx: idx - 1, rowIdx };\n      case rightKey:\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return { idx: 0, rowIdx: ctrlKey ? minRowIdx : rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return { idx: maxColIdx, rowIdx: ctrlKey ? maxRowIdx : rowIdx };\n      case 'PageUp': {\n        if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          maxColIdx,\n          minRowIdx,\n          maxRowIdx,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (isSamePosition(selectedPosition, nextPosition)) return;\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      summaryRows,\n      minRowIdx,\n      maxRowIdx,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds: isCellWithinSelectionBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getLayoutCssVars() {\n    if (autoResizeColumn === null) return layoutCssVars;\n    const { gridTemplateColumns } = layoutCssVars;\n    const newSizes = gridTemplateColumns.split(' ');\n    newSizes[autoResizeColumn.idx] = 'max-content';\n    return {\n      ...layoutCssVars,\n      gridTemplateColumns: newSizes.join(' ')\n    };\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    const closeEditor = () => {\n      setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n    };\n\n    const onRowChange = (row: R, commitChanges?: boolean) => {\n      if (commitChanges) {\n        updateRow(selectedPosition.rowIdx, row);\n        closeEditor();\n      } else {\n        setSelectedPosition((position) => ({ ...position, row }));\n      }\n    };\n\n    if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n      // Discard changes if rows are updated from outside\n      closeEditor();\n    }\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        onRowChange={onRowChange}\n        closeEditor={closeEditor}\n        scrollToCell={() => {\n          scrollToCell(selectedPosition);\n        }}\n      />\n    );\n  }\n\n  function getRowViewportColumns(rowIdx: number) {\n    const selectedColumn = columns[selectedPosition.idx];\n    if (\n      // idx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      selectedColumn !== undefined &&\n      selectedPosition.rowIdx === rowIdx &&\n      !viewportColumns.includes(selectedColumn)\n    ) {\n      // Add the selected column to viewport columns if the cell is not within the viewport\n      return selectedPosition.idx > colOverscanEndIdx\n        ? [...viewportColumns, selectedColumn]\n        : [\n            ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n            selectedColumn,\n            ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n          ];\n    }\n    return viewportColumns;\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const startRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns = getRowViewportColumns(rowIdx);\n        }\n      }\n\n      const row = rows[rowIdx];\n      const gridRowStart = headerRowsCount + rowIdx + 1;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            gridRowStart={gridRowStart}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          gridRowStart={gridRowStart}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectViewportCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  let templateRows = `${headerRowHeight}px`;\n  if (rows.length > 0) {\n    templateRows += gridTemplateRows;\n  }\n  if (summaryRowsCount > 0) {\n    templateRows += ` repeat(${summaryRowsCount}, ${summaryRowHeight}px)`;\n  }\n\n  const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== -2;\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(\n        rootClassname,\n        {\n          [viewportDraggingClassname]: isDragging,\n          [cellAutoResizeClassname]: autoResizeColumn !== null\n        },\n        className\n      )}\n      style={\n        {\n          ...style,\n          gridTemplateRows: templateRows,\n          '--rdg-header-row-height': `${headerRowHeight}px`,\n          '--rdg-summary-row-height': `${summaryRowHeight}px`,\n          '--rdg-sign': isRtl ? -1 : 1,\n          ...getLayoutCssVars()\n        } as unknown as React.CSSProperties\n      }\n      dir={direction}\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      {/* extra div is needed for row navigation in a treegrid */}\n      {hasGroups && (\n        <div\n          ref={rowRef}\n          tabIndex={isGroupRowFocused ? 0 : -1}\n          className={clsx(focusSinkClassname, {\n            [rowSelected]: isGroupRowFocused,\n            [rowSelectedWithFrozenCell]: isGroupRowFocused && lastFrozenColumnIndex !== -1\n          })}\n          style={{\n            gridRowStart: selectedPosition.rowIdx + 2\n          }}\n          onKeyDown={handleKeyDown}\n        />\n      )}\n      <DataGridDefaultComponentsProvider value={defaultGridComponents}>\n        <HeaderRow\n          columns={getRowViewportColumns(-1)}\n          onColumnResize={handleColumnResize}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={selectAllRowsLatest}\n          sortColumns={sortColumns}\n          onSortColumnsChange={onSortColumnsChange}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          selectedCellIdx={isHeaderRowSelected ? selectedPosition.idx : undefined}\n          selectCell={selectHeaderCellLatest}\n          shouldFocusGrid={!selectedCellIsWithinSelectionBounds}\n          direction={direction}\n        />\n        {rows.length === 0 && noRowsFallback ? (\n          noRowsFallback\n        ) : (\n          <>\n            <RowSelectionChangeProvider value={selectRowLatest}>\n              {getViewportRows()}\n            </RowSelectionChangeProvider>\n            {summaryRows?.map((row, rowIdx) => {\n              const gridRowStart = headerRowsCount + rows.length + rowIdx + 1;\n              const summaryRowIdx = headerRowsCount + rows.length + rowIdx - 1;\n              const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n              const top =\n                clientHeight > totalRowHeight\n                  ? gridHeight - summaryRowHeight * (summaryRows.length - rowIdx)\n                  : undefined;\n              const bottom =\n                top === undefined\n                  ? summaryRowHeight * (summaryRows.length - 1 - rowIdx)\n                  : undefined;\n\n              return (\n                <SummaryRow\n                  aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n                  key={rowIdx}\n                  rowIdx={rowIdx}\n                  gridRowStart={gridRowStart}\n                  row={row}\n                  top={top}\n                  bottom={bottom}\n                  viewportColumns={getRowViewportColumns(summaryRowIdx)}\n                  lastFrozenColumnIndex={lastFrozenColumnIndex}\n                  selectedCellIdx={isSummaryRowSelected ? selectedPosition.idx : undefined}\n                  selectCell={selectSummaryCellLatest}\n                />\n              );\n            })}\n          </>\n        )}\n      </DataGridDefaultComponentsProvider>\n    </div>\n  );\n}\n\nfunction isSamePosition(p1: Position, p2: Position) {\n  return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  inline-size: 100%;\n  block-size: 100%;\n  padding-block: 0;\n  padding-inline: 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--rdg-color);\n  background-color: var(--rdg-background-color);\n\n  font-family: inherit;\n  font-size: var(--rdg-font-size);\n\n  &:focus {\n    border-color: var(--rdg-selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellAutoResizeClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","viewportDragging","viewportDraggingClassname","focusSinkClassname","row","rowClassname","rowSelected","rowSelectedClassname","rowSelectedWithFrozenCell","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","CheckboxFormatter","forwardRef","onChange","props","ref","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","disabled","_jsx","useLayoutEffect","window","useEffect","useOriginalLayoutEffect","useFocusRef","isSelected","useRef","current","focus","preventScroll","tabIndex","DataGridDefaultComponentsContext","createContext","undefined","DataGridDefaultComponentsProvider","Provider","useDefaultComponents","useContext","SelectCellFormatter","value","isCellSelected","ariaLabel","ariaLabelledBy","Formatter","checkboxFormatter","ValueFormatter","_Fragment","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","handleKeyDown","d","RowSelectionContext","RowSelectionProvider","RowSelectionChangeContext","RowSelectionChangeProvider","useRowSelection","rowSelectionContext","rowSelectionChangeContext","Error","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","minWidth","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","idx","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","event","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getSelectedCellColSpan","summaryRows","type","length","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","minRowIdx","maxRowIdx","currentPosition","currentIdx","nextPosition","isCellWithinBounds","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","maxColIdx","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","getRowStyle","height","getCellStyle","gridColumnStart","gridColumnEnd","insetInlineStart","getCellClassname","extraClasses","isLastFrozenColumn","min","max","round","floor","sign","abs","ceil","Math","assertIsValidKeyGetter","keyGetter","clampColumnWidth","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","defaultWidth","defaultMinWidth","defaultMaxWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","map","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","set","columnMetric","get","unallocatedWidth","unallocatedColumnWidth","gridTemplateColumns","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","test","parseInt","useGridDimensions","gridRef","inlineSize","setInlineSize","useState","blockSize","setBlockSize","ResizeObserver","clientWidth","clientHeight","offsetWidth","offsetHeight","getBoundingClientRect","initialWidth","initialHeight","handleDevicePixelRatio","resizeObserver","entries","size","contentBoxSize","observe","disconnect","devicePixelRatio","useLatestFunc","fn","useCallback","useRovingCellRef","isChildFocused","setIsChildFocused","contains","document","activeElement","onFocus","currentTarget","isFocused","useViewportColumns","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","viewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","groupRow","setSize","add","totalRowHeight","gridTemplateRows","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","HeaderRenderer","sortDirection","priority","onSort","SortableHeaderCell","children","SortIcon","sortIcon","preventDefault","handleClick","cellResizable","cellResizableClassname","HeaderCell","onColumnResize","sortColumns","onSortColumnsChange","selectCell","shouldFocusGrid","direction","isRtl","sortIndex","findIndex","columnKey","sortColumn","ariaSort","className","headerCellClass","DefaultHeaderRenderer","onPointerDown","pointerType","buttons","pointerId","right","clientX","onPointerMove","onLostPointerCapture","removeEventListener","setPointerCapture","addEventListener","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","onClick","onDoubleClick","handleFocus","headerRow","headerRowClassname","HeaderRow","selectedCellIdx","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","cellClass","selectCellWrapper","openEditor","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","Row","gridRowStart","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","handleRowChange","newRow","handleDragEnter","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","groupRowClassname","GroupedRow","selectGroup","handleSelectGroup","summaryCellClassname","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","summaryRow","summaryRowBorderClassname","summaryRowClassname","SummaryRow","bottom","ariaRowIndex","cellEditing","EditCell","closeEditor","scrollToCell","frameRequestRef","commitOnOutsideClick","commitOnOutsideMouseDown","onClose","onWindowCaptureMouseDown","requestAnimationFrame","capture","cancelFrameRequest","cancelAnimationFrame","onKeyDown","stopPropagation","onNavigation","commitChanges","renderFormatter","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","arrow","arrowClassname","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","onScroll","onCopy","onPaste","rawCellNavigationMode","components","style","ariaDescribedBy","testId","defaultComponents","RowRenderer","rowRenderer","noRowsFallback","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","autoResizeColumn","setAutoResizeColumn","prevSelectedPosition","lastSelectedRowIdx","rowRef","gridWidth","gridHeight","headerRowsCount","summaryRowsCount","isSelectable","isHeaderRowSelected","leftKey","rightKey","defaultGridComponents","every","hasGroups","minColIdx","selectedCellIsWithinSelectionBounds","isCellWithinSelectionBounds","selectedCellIsWithinViewportBounds","isCellWithinViewportBounds","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectViewportCellLatest","enableEditor","selectGroupLatest","selectHeaderCellLatest","selectSummaryCellLatest","toggleGroupLatest","isSamePosition","columnElement","querySelector","newColumnWidths","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","Element","isCellEvent","closest","isRowEvent","keyCode","cKey","vKey","handleCopy","handlePaste","isRowIdxWithinViewportBounds","navigate","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","sourceColumnKey","updatedTargetRow","targetColumnKey","onCellKeyDown","isDefaultPrevented","originalRow","isColIdxWithinSelectionBounds","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getNextPosition","parentRowIdx","parentRow","nextRowY","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getLayoutCssVars","newSizes","split","join","getDragHandle","getCellEditor","getRowViewportColumns","selectedColumn","slice","getViewportRows","rowElements","selectedIdx","selectedRowIdx","viewportRowIdx","isRowOutsideViewport","rowColumns","isGroupRowSelected","cr","c","templateRows","isGroupRowFocused","summaryRowIdx","isSummaryRowSelected","p1","p2","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor"],"mappings":"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"}